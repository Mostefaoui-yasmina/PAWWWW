document.getElementById('taskForm').addEventListener('submit', (e) => {
    e.preventDefault();

    const title = document.getElementById('title').value;
    const category = document.getElementById('category').value;
    const priority = document.getElementById('priority').value;
    const dueDate = document.getElementById('due_date').value;

    if (!title) {
        alert("Task Title is required!");
        return;
    }

    // V√©rifier si une t√¢che est en cours de modification
    const editingTaskId = document.getElementById('taskForm').dataset.editingTaskId;
    
    if (editingTaskId) {
        // Modifier la t√¢che existante
        const taskItem = document.getElementById(editingTaskId);
        taskItem.querySelector('.task-title').innerHTML = `<strong>${title}</strong>`;
        taskItem.querySelector('.task-category').textContent = category;
        taskItem.querySelector('.task-priority').textContent = priority;
        taskItem.querySelector('.task-due-date').textContent = dueDate || "No Due Date";

        // Remettre √† z√©ro les champs du formulaire et supprimer l'attribut data-editingTaskId
        document.getElementById('taskForm').reset();
        delete document.getElementById('taskForm').dataset.editingTaskId;
    } else {
        // Ajouter une nouvelle t√¢che si aucune t√¢che n'est en cours de modification
        const taskList = document.getElementById('task-list');
        const taskItem = document.createElement('li');
        taskItem.classList.add('task-item');
        taskItem.id = `task-${Date.now()}`;  // Ajouter un ID unique √† la t√¢che

        taskItem.innerHTML = `
            <span class="task-title"><strong>${title}</strong></span> |
            <span class="task-category">${category}</span> |
            <span class="task-priority">${priority}</span> |
           <span class="task-due-date">${dueDate ? dueDate : "No Due Date"}</span>
            <button class="complete-btn">‚úÖ Terminer</button>
            <button class="edit-btn">‚úèÔ∏è Modifier</button>
            <button class="delete-btn">‚ùå Supprimer</button>
        `;

        taskList.appendChild(taskItem);
    }

    // Mettre √† jour le r√©sum√© des t√¢ches
    updateTaskSummary();

    // Clear form fields
    document.getElementById('taskForm').reset();
});

// Modifier une t√¢che
document.addEventListener('click', (e) => {
    if (e.target.classList.contains('edit-btn')) {
        const taskItem = e.target.closest('li');
        
        // R√©cup√©rer les donn√©es de la t√¢che
        const title = taskItem.querySelector('.task-title').textContent;
        const category = taskItem.querySelector('.task-category').textContent;
        const priority = taskItem.querySelector('.task-priority').textContent;
        const dueDate = taskItem.querySelector('.task-due-date').textContent === "No Due Date" ? "" : taskItem.querySelector('.task-due-date').textContent;

        // Remplir le formulaire avec les donn√©es de la t√¢che
        document.getElementById('title').value = title;
        document.getElementById('category').value = category;
        document.getElementById('priority').value = priority;
        document.getElementById('due_date').value = dueDate;

        // Ajouter un id pour indiquer qu'on modifie cette t√¢che
        document.getElementById('taskForm').dataset.editingTaskId = taskItem.id;
    }
});

// Supprimer une t√¢che
document.addEventListener('click', (e) => {
    if (e.target.classList.contains('delete-btn')) {
        const taskItem = e.target.closest('li');
        taskItem.remove();
        updateTaskSummary();
    }
});

// Marquer une t√¢che comme termin√©e
document.addEventListener('click', (e) => {
    if (e.target.classList.contains('complete-btn')) {
        const taskItem = e.target.closest('li');
        taskItem.classList.toggle('completed');
        updateTaskSummary();
    }
});// Mettre √† jour le r√©sum√© des t√¢ches
function updateTaskSummary() {
    const totalTasks = document.querySelectorAll('#task-list li').length;
    const completedTasks = document.querySelectorAll('#task-list li.completed').length;
    const uncompletedTasks = totalTasks - completedTasks;

    document.getElementById('total-tasks').textContent = totalTasks;
    document.getElementById('completed-tasks').textContent = completedTasks;
    document.getElementById('uncompleted-tasks').textContent = uncompletedTasks;
}

// Liste des messages de motivation
const messages = [
    "Chaque petit pas compte, continue d‚Äôavancer ! üåü",
    "Tu es plus proche de ton objectif que tu ne le crois ! üöÄ",
    "Fais aujourd‚Äôhui quelque chose dont ton futur toi te remerciera üèÜ",
    "Le succ√®s est une collection de petits efforts r√©p√©t√©s chaque jour üå±",
    "Respire profond√©ment, organise-toi, et attaque la journ√©e avec s√©r√©nit√© üçµ",
];

// Fonction pour afficher un message al√©atoire
function afficherMessageMotivation() {
    const messageElement = document.getElementById('motivation-message');
    const indexAleatoire = Math.floor(Math.random() * messages.length);
    messageElement.textContent = messages[indexAleatoire];
}

// Afficher un nouveau message toutes les 10 secondes
setInterval(afficherMessageMotivation, 10000);setInterval(afficherMessageMotivation, 10000);document.getElementById('dark-mode-toggle').addEventListener('click', function () {
    // Basculer la classe 'dark-mode' sur le body
    document.body.classList.toggle('dark-mode');
    
    // Sauvegarder l'√©tat du mode sombre dans localStorage
    if (document.body.classList.contains('dark-mode')) {
        localStorage.setItem('darkMode', 'enabled');
    } else {
        localStorage.setItem('darkMode', 'disabled');
    }
});

// Charger l'√©tat du mode sombre depuis localStorage au d√©marrage
if (localStorage.getItem('darkMode') === 'enabled') {
    document.body.classList.add('dark-mode');
}
// Fonction pour ajouter l'emoji en fonction de la cat√©gorie
function getCategoryWithEmoji(category) {
    const categoryEmojis = {
        "Travail et Productivit√©": "üíº",
        "√âtudes et Formation": "üìö",
        "Maison et Organisation": "üè†",
        "Sant√© et Bien-√™tre": "üßò‚Äç‚ôÇÔ∏è",
        "Sport": "üèãÔ∏è",
        "Loisirs": "üé®",
        "Autres": "üåà"
    };
    return category + " " + (categoryEmojis[category] || "");
}

// Fonction pour ajouter l'emoji en fonction de la priorit√©
function getPriorityWithEmoji(priority) {
    const priorityEmojis = {
        "√âlev√©e": "üî•",
        "Moyenne": "‚ö°Ô∏è",
        "Faible": "üå±"
    };
    return priority + " " + (priorityEmojis[priority] || "");
}
function updateProgressCircle() {
    const totalTasks = document.querySelectorAll('#task-list li').length;
    const completedTasks = document.querySelectorAll('#task-list li.completed').length;

    // Calculer le pourcentage de t√¢ches compl√©t√©es
    const progressPercentage = totalTasks > 0 ? (completedTasks / totalTasks) * 100 : 0;

    // Mettre √† jour le cercle de progression
    const progressCircle = document.querySelector('.progress-circle .foreground');
    const progressText = document.querySelector('.progress-circle .progress-text');

    const circleCircumference = 440; // Correspond au stroke-dasharray d√©fini dans le CSS
    const offset = circleCircumference - (progressPercentage / 100) * circleCircumference;

    progressCircle.style.strokeDashoffset = offset;
    progressText.textContent = `${Math.round(progressPercentage)}%`;

}

// Appeler updateProgressCircle dans updateTaskSummary
function updateTaskSummary() {
    const totalTasks = document.querySelectorAll('#task-list li').length;
    const completedTasks = document.querySelectorAll('#task-list li.completed').length;
    const uncompletedTasks = totalTasks - completedTasks;

    document.getElementById('total-tasks').textContent = totalTasks;
    document.getElementById('completed-tasks').textContent = completedTasks;
    document.getElementById('uncompleted-tasks').textContent = uncompletedTasks;

    // Mettre √† jour le cercle de progression
    updateProgressCircle();
}

if (categorySelect) {
    categorySelect.value = category || "Autres"; // Par d√©faut : "Autres"
}
if (prioritySelect) {
    prioritySelect.value = priority || "Moyenne"; // Par d√©faut : "Moyenne"
}
